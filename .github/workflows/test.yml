# Copyright 2019 The Berglas Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI/CD

on:
  push:
    branches:
    - 'main'
    tags:
    - '*'
  pull_request:
    branches:
    - 'main'

jobs:
  # test runs the tests
  test:
    strategy:
      fail-fast: false

    runs-on: 'ubuntu-latest'

    name: 'test'

    env:
      CREDS_JSON: ${{ secrets.GOOGLE_CREDENTIALS }}

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-go@v3
      with:
        go-version: '1.18'

    - uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Test (Unit)
      run: make test

    - name: Test (Integration)
      if: ${{ env.CREDS_JSON }}
      run: |-
        echo '${{ env.CREDS_JSON }}' > ${{ runner.temp }}/account.json
        make test-acc
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/account.json
        GOOGLE_CLOUD_PROJECT: berglas-test
        GOOGLE_CLOUD_BUCKET: berglas-test-secrets
        GOOGLE_CLOUD_KMS_KEY: projects/berglas-test/locations/global/keyRings/my-keyring/cryptoKeys/my-key
        GOOGLE_CLOUD_SERVICE_ACCOUNT: berglas-test@berglas-test.iam.gserviceaccount.com

  # binaries builds and publishes the go binaries, only on push and tag
  binaries:
    if: ${{ success() && (github.event_name == 'push' || github.event_name == 'tag') }}
    needs: test

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
        - os: ubuntu-latest
          goos: linux
          goarch: amd64
        - os: macos-latest
          goos: darwin
          goarch: amd64
        - os: windows-latest
          goos: windows
          goarch: amd64

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-go@v3
      with:
        go-version: '1.18'

    - uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Extract ref
      id: extract_ref
      shell: bash
      run: |-
        REF="${GITHUB_REF##*/}"
        REF="${REF//v}"
        echo "##[set-output name=ref;]$(echo ${REF})"

    - name: Build binary
      shell: bash
      env:
        CGO_ENABLED: 0
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |-
        go build \
          -a \
          -trimpath \
          -ldflags "-s -w -extldflags '-static'" \
          -tags "osusergo,netgo,static,static_build" \
          -o build/${{ env.GOOS }}_${{ env.GOARCH }}/berglas \
          .

    - name: Upload binary
      uses: google-github-actions/upload-cloud-storage@main
      with:
        credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
        path: build/${{ matrix.goos }}_${{ matrix.goarch }}
        destination: berglas/${{ steps.extract_ref.outputs.ref }}/${{ matrix.goos }}_${{ matrix.goarch }}/
        parent: false

  # container builds and publishes the docker container
  container:
    if: ${{ success() && (github.event_name == 'push' || github.event_name == 'tag') }}
    needs: test

    strategy:
      fail-fast: false
      matrix:
        target:
        - asia-docker.pkg.dev
        - europe-docker.pkg.dev
        - us-docker.pkg.dev
        repository:
        - berglas/berglas/berglas

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Authenticate to Artifact Registry
      uses: docker/login-action@v2
      with:
        username: _json_key
        password: ${{ secrets.GOOGLE_CREDENTIALS }}
        registry: ${{ matrix.target }}

    - name: Extract ref
      id: extract_ref
      shell: bash
      run: |-
        REF="${GITHUB_REF##*/}"
        REF="${REF//v}"
        REF="${REF/main/latest}"
        echo "##[set-output name=ref;]$(echo ${REF})"

    - name: ${{ matrix.target }}
      uses: docker/build-push-action@v2
      with:
        push: true
        pull: true
        tags: ${{ matrix.target }}/${{ matrix.repository }}:${{ steps.extract_ref.outputs.ref }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.revision=${{ github.sha }}
